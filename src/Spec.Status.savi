:class Spec.Status
  :let examples: Map.Ordered(String, Spec.Status.ForExample).new
  :var expected_examples USize: 0
  :let name String
  :var is_ended Bool: False
  :var is_reported Bool: False
  :new (@name)

:class Spec.Status.ForExample
  :let name String
  :let _runner _Runner.Any
  :let events: Array(Spec.Assert).new
  :var events_reported USize: 0
  :var is_synchronous_portion_ended Bool: False
  :var is_ended Bool: False
  :var is_reported Bool: False
  :new (@name, @_runner)

  :fun is_waiting_to_end Bool
    !@is_ended && @is_synchronous_portion_ended && @has_any_waiting_actions

  :fun is_ready_to_end Bool
    !@is_ended && @is_synchronous_portion_ended && !@has_any_waiting_actions

  :fun _waiting_action_counts
    counts = Map(String, I32).new
    @events.each -> (event |
      case event <: (
      | Spec.Assert.WaitForAction |
        // TODO: A more streamlined method in Map for doing this "upsert":
        counts[event.action] = try (counts[event.action]! + 1 | 1)
      | Spec.Assert.FinishedAction |
        // TODO: A more streamlined method in Map for doing this "upsert":
        counts[event.action] = try (counts[event.action]! - 1 | -1)
      )
    )
    counts

  :fun has_any_waiting_actions
    @_waiting_action_counts.has_any -> (action, count | count > 0)

  :fun each_waiting_action_event
    :yields Spec.Assert.WaitForAction for None
    counts = @_waiting_action_counts
    counts.each -> (action, count |
      next if (count <= 0)

      yielded_count = 0
      @events.reverse_each -> (event |
        if (event <: Spec.Assert.WaitForAction) (
          next unless (event.action == action)

          yield event

          yielded_count += 1
          break if (yielded_count == count)
        )
      )
    )
