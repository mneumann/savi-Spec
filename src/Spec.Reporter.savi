:trait Spec.Reporter
  :fun ref overall_began: None
  :fun ref overall_ended: None
  :fun ref spec_began(spec String): None
  :fun ref spec_ended(spec String): None
  :fun ref example_began(spec String, example String): None
  :fun ref example_ended(spec String, example String, stats Spec.Statistics.ForExample): None
  :fun ref example_timed_ping(spec String, example String): None
  :fun ref example_timed_out(spec String, example String): None
  :fun ref event(spec String, example String, event Spec.Assert): None

:class Spec.Reporter.Dots
  :is Spec.Reporter
  :let env Spec.Env
  :let statuses Map.Ordered(String, Spec.Status)
  :new (@env, @statuses)

  :fun ref spec_ended(spec String)
    @env.write_err(";")

  :fun ref example_began(spec String, example String)
    @env.write_err(" ")

  :fun ref event(spec String, example String, event Spec.Assert)
    if event.success (
      @env.write_err(".")
    |
      @env.print_err("\nFAIL: \(spec) \(example)")
      @env.print_err("  X \(event.pos.string)")
    )

:class Spec.Reporter.Full
  :is Spec.Reporter
  :let env Spec.Env
  :let statuses Map.Ordered(String, Spec.Status)
  :let failed_events: Array(Spec.Assert).new

  :new (@env, @statuses)

  :fun ref spec_began(spec String)
    @env.print_err(spec)

  :fun ref spec_ended(spec String)
    @env.print_err("") // just a newline

  :fun ref example_began(spec String, example String)
    @env.write_err("  \(example) ")

  :fun ref example_ended(spec String, example String, stats Spec.Statistics.ForExample)
    msg = case (
    | stats.failed_events > 0 | @_red("FAIL")
    | stats.passed_events > 0 | @_green("OK")
    |                           "SKIP"
    )
    @env.print_err(" \(--msg)")

    @failed_events.each -> (event |
      @env.print_err(String.join(event.format_failure, "\n"))
    )

  :var colorize Bool: True

  :fun _red(s String): @_fg_color(s, _FgColor.Red)

  :fun _green(s String): @_fg_color(s, _FgColor.Green)

  :fun _fg_color(s String, color _FgColor): String
    if (@colorize) (
      "\(color.ansii)\(s)\(_FgColor.Black.ansii)"
    |
      --s
    )

  :fun ref event(spec String, example String, event Spec.Assert) None
    if event.success (
      @env.write_err(".")
    |
      @env.write_err("F")
      @failed_events << event
    )

  :fun ref example_timed_ping(spec String, example String)
    try (
      status = @statuses[spec]!.examples[example]!
      status.each_waiting_action_event -> (event |
        @env.write_out("\n    waiting for action: ")
        @env.print_out(Inspect[event.action])
        @env.print_out(event.file_and_line)
      )
    |
      @env.bug("no status for this example")
    )

  :fun ref example_timed_out(spec String, example String)
    try (
      status = @statuses[spec]!.examples[example]!
      status.each_waiting_action_event -> (event |
        @env.write_out("\n    Timed out waiting for action: ")
        @env.print_out(Inspect[event.action])
        @env.print_out(event.file_and_line)
      )
    |
      @env.bug("no status for this example")
    )

:enum _FgColor
  :member Black 30
  :member Red 31
  :member Green 32

  :fun ansii String
    "\x1b[\(@format.decimal)m"


:class Spec.Reporter.Linear
  :is Spec.Reporter
  :let env Spec.Env
  :let statuses Map.Ordered(String, Spec.Status)
  :let inner Spec.Reporter
  :var current_spec: ""
  :var current_example: ""
  :new (@env, @statuses, @inner)

  :fun ref overall_began: @inner.overall_began
  :fun ref overall_ended: @inner.overall_ended
  :fun ref spec_began(spec String): @_changed
  :fun ref spec_ended(spec String): @_changed
  :fun ref example_began(spec String, example String): @_changed
  :fun ref example_ended(spec String, example String, stats Spec.Statistics.ForExample): @_changed
  :fun ref event(spec String, example String, event Spec.Assert): @_changed

  :fun ref example_timed_ping(spec String, example String)
    @_changed
    return unless (spec == @current_spec)
    return unless (example == @current_example)
    @inner.example_timed_ping(spec, example)

  :fun ref example_timed_out(spec String, example String)
    @_changed
    return unless (spec == @current_spec)
    return unless (example == @current_example)
    @inner.example_timed_out(spec, example)

  :fun ref _changed None // TODO: be able to infer return type for maybe-recursive functions
    // If no spec and example are selected for linear reporting, pick them now.
    if @current_spec   .is_empty @_choose_next_spec
    if @current_example.is_empty @_choose_next_example

    // Now report on the selected example and spec. This has to be done in this
    // order, since examples in the spec need to be reported before reporting
    // the end of the spec. Both of these functions are potentially recursive,
    // in the event that the example or spec is finished and we need to pick
    // new ones to continue reporting more about changes to the statuses.
    if @current_example.is_not_empty @_report_examples_from_current
    if @current_spec   .is_not_empty @_report_specs_from_current

  :fun ref _choose_next_spec Bool
    // Find the name of the first spec whose status is not yet reported.
    @statuses.each_until -> (spec, status |
      if (status.is_reported.not) (
        @current_spec = spec
        @current_example = ""
        @inner.spec_began(@current_spec)
        True
      |
        False
      )
    )

  :fun ref _choose_next_example Bool
    // Find the name of the first example in this spec that is not yet reported.
    try (
      status = @statuses[@current_spec]!
      status.examples.each_until -> (example, example_status |
        if example_status.is_reported.not (
          @current_example = example
          @inner.example_began(@current_spec, @current_example)
          True
        |
          False
        )
      )
    |
      @env.bug("no status for current_spec")
      False
    )

  :fun ref _report_examples_from_current None // TODO: be able to infer return type for maybe-recursive functions
    try (
      example_status = @statuses[@current_spec]!.examples[@current_example]!

      // Any events that have arrived for this example, but have not yet
      // been reported should be reported now, tracking how many we've done.
      while (example_status.events_reported < example_status.events.size) (
        try (
          event = example_status.events[example_status.events_reported]!
          @inner.event(@current_spec, @current_example, event)
        )
        example_status.events_reported += 1
      )

      if example_status.is_ended (
        // If the example has finished, but has not yet been reported, report now.
        if !example_status.is_reported (
          stats = Spec.Statistics.ForExample.from_events(example_status.events)
          @inner.example_ended(@current_spec, @current_example, stats)
          example_status.is_reported = True
        )

        // Since we've finished this example, look to pick up another.
        // We'll recurse into this function as many times as we can,
        // reporting as many consecutive examples for this spec as are complete.
        if @_choose_next_example @_report_examples_from_current
      )
    |
      @env.bug("no status for current_example")
    )

  :fun ref _report_specs_from_current None // TODO: be able to infer return type for maybe-recursive functions
    try (
      status = @statuses[@current_spec]!

      // If the spec is finished, but we haven't reported, report it now.
      if (status.is_ended && status.is_reported.not) (
        // Try to find an example not yet reported, and report it.
        // This call will recurse until all examples in the spec are reported.
        if @_choose_next_example @_report_examples_from_current

        // Now that all examples are reported, report the end of the spec.
        @inner.spec_ended(@current_spec)
        status.is_reported = True

        // Since we've finished reporting this spec, look to pick up another.
        // We'll recurse into this function as many times as we can,
        // reporting as many consecutive specs as are complete.
        if @_choose_next_spec @_report_specs_from_current
      )
    |
      @env.bug("no status for current_spec")
    )
